package com.soc.dao.knowledgemanger;

import java.util.List;
import java.util.Map;

import com.soc.dao.BaseDao;
import com.soc.model.knowledge.Vulnerability;

/**
 * 
 * 漏洞管理DAO
 * 对相关漏洞库的操作：查询漏洞、修改漏洞、删除漏洞、导入导出漏洞库
 * 
 * @author  曹理冬
 * @version [V100R001C001, 2012-8-18]
 * @see  [BaseAction,VulnerabilityServiceImpl]
 * @since  [产品/V100R001C001]
 */
public interface VulnerabilityDao extends BaseDao
{
    /**
     * 查询漏洞条数
     * 
     * @param map Map
     * @return int
     * @see
     */
    public int count(Map map);
    
    /**
     * 查询漏洞列表信息
     * 
     * @param map Map
     * @param startRow int
     * @param pageSize int
     * @return List<Vulnerability>
     * @see 
     */
    public List<Vulnerability> queryVulnerability(Map map, int startRow, int pageSize);
    
    /**
     * 根据Id查询漏洞信息
     * 
     * @param vulnerabilityId long
     * @return Vulnerability
     * @see 
     */
    public Vulnerability queryVulnerabilityById(long vulnerabilityId);
    
    /**
     * 修改漏洞信息
     * 
     * @param vulnerability Vulnerability
     * @see 
     */
    public void updateVulnerability(Vulnerability vulnerability);
    
    /**
     * 根据ID删除漏洞信息(标记删除)
     * 
     * @param vulnerabilityId long
     * @see 
     */
    public void deleteVulnerability(long vulnerabilityId);
    
    /**
     * 根据漏洞类型查询漏洞信息
     * 
     * @param vulnerabilityType String
     * @return List<Vulnerability>
     * @see [类、类#方法、类#成员]
     */
    public List<Vulnerability> queryVulnerabilityType(String vulnerabilityType);
    /**
     * <根据漏洞类型查询信息>
     * <功能详细描述>
     * @param vulnerabilityType String
     * @return List<Vulnerability>
     * @see [类、类#方法、类#成员]
     */
    public List<Map> queryVulnerabilityByType(String vulnerabilityType);
    /**
     * <导出漏洞查询信息>
     * <功能详细描述>
     * @param map Map
     * @return List<Map>
     * @see [类、类#方法、类#成员]
     */
    public List<Map> exportVulnerability(Map map);
    
    /**
     * 查询漏洞信息(不分页)
     * 
     * @param map Map
     * @return List<Vulnerability>
     * @see [类、类#方法、类#成员]
     */
    public List<Vulnerability> queryVulnerability(Map map);
    
    /**
     * 插入漏洞信息
     * 批量插入漏洞信息（漏洞升级处用）
     * @param list List<Map<String, Object>>
     * @return long
     * @see 
     */
    public int insertVulnerability(List<Map<String, Object>> list);
    
    /**
     * 删除全部漏洞信息
     * 清空漏洞信息表内的全部数据(id从1开始增长)
     * @param 
     * @return 
     * @see 
     */
    public void delete1Vulnerability();
    
    /**
     * 根据漏洞编号查询信息
     * 根据传入的漏洞编号查询漏洞
     * @param vulnerabilityUniqueIdentification String
     * @return Vulnerability
     * @see 
     */
    public Vulnerability queryVulnerabilityUniqueIdentification(String vulnerabilityUniqueIdentification);
    
    /**
     * 查询所有漏洞类型
     * 查询漏洞信息库内的所有漏洞信息
     * @param 
     * @return List<Map>
     * @see 
     */
    public List<Vulnerability> queryVulnerabilityType();
    
    /**
     * 导入漏洞信息
     * 
     * @param vulnerability Vulnerability
     * @return List<Vulnerability>
     * @see 
     */
    public List<Vulnerability> importVulnerability(Vulnerability vulnerability);
    
    /**
     * 根据漏洞编号查询漏洞信息
     * 
     * @param vulnerabilityUniqueIdentification String
     * @return List<Vulnerability>
     * @see 
     */
    public List<Vulnerability> queryVulnerabilityByUniqueIdentification(String vulnerabilityUniqueIdentification);
    /**
     * <查询出漏洞id和名称>
     * <根据漏洞id查询出漏洞id和名称>
     * @param vulnerabilityId
     * @return Map
     * @see [类、类#方法、类#成员]
     */
    public Map queryVulnerabilityBasic(long vulnerabilityId);
    /**
     * <查询出所有符合条件的的漏洞信息>
     * <查询出所有符合条件的的漏洞信息>
     * @return List<Map>
     * @see [类、类#方法、类#成员]
     */
    public List<Map> queryAllVulnerabilityBasic(Map map);
    /**
     * <查出某种类型的漏洞个数>
     * <查出某种类型的漏洞个数>
     * @return int
     * @see [类、类#方法、类#成员]
     */
    public int vulnerabilityCountByType(String vulnerabilityType);
    /**
     * <查询出漏洞所有id>
     * <查询出漏洞所有id>
     * @return
     * @see [类、类#方法、类#成员]
     */
    public List<Map> queryVulnerabilityId();
    /**
     * <查处符合条件的第一条漏洞信息>
     * <查处符合条件的第一条漏洞信息>
     * @param vulnerabilityType
     * @return Vulnerability
     * @see [类、类#方法、类#成员]
     */
    public Vulnerability queryFirstByType(String vulnerabilityType);
    /**
     * 导入修改漏洞信息
     * 导入的时候如果有重复的执行修改操作
     * @param vulnerability Vulnerability
     * @return 
     * @see 
     */
    public void importUpdateVulnerability(Vulnerability vulnerability);
    
    /**
     * 查询库内所有的漏洞编号
     * 查询漏洞信息库内所有漏洞的漏洞编号
     * @return List<Vulnerability>
     * @see 
     */
    public List<Vulnerability> queryVulnerabilityIdentification();
    
    /**
     * <排序升级的结果>
     * <str参数用来前台查询语句的字符串>
     * @param str
     * @param audit
     * @param startRow
     * @param pageSize
     * @return List<Vulnerability>
     * @see [类、类#方法、类#成员]
     */
    public List<Vulnerability> queryBySort(String str,int startRow,int pageSize);
    
    
}
