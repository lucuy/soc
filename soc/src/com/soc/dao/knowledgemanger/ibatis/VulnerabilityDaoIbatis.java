package com.soc.dao.knowledgemanger.ibatis;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.util.CollectionUtils;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.soc.dao.ibatis.BaseDaoIbatis;
import com.soc.dao.knowledgemanger.VulnerabilityDao;
import com.soc.model.conf.GlobalConfig;
import com.soc.model.knowledge.Vulnerability;

/**
 * 
 * <一句话功能简述>
 * <功能详细描述>
 * 
 * @author  gaosong
 * @version  [版本号, 2013-1-29]
 * @see  [相关类/方法]
 * @since  [产品/模块版本]
 */
public class VulnerabilityDaoIbatis extends BaseDaoIbatis implements VulnerabilityDao
{
    
    private List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
    
    /**
     * {@inheritDoc}
     */
    public int count(Map map)
    {
        Object ob = null;
        
        // 根据map中存储的条件查询符合条件的漏洞的记录数
        try
        {
            ob = super.queryForObject(GlobalConfig.sqlId+"vulnerability.count", map);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        
        // 总条数
        int totalRows = 0;
        
        if (ob != null)
        {
            totalRows = ((Integer)ob).intValue();
        }
        
        return totalRows;
        
    }
    
    /**
     * {@inheritDoc}
     */
    public List<Vulnerability> queryVulnerability(Map map, int startRow, int pageSize)
    {
        
        return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"vulnerability.query", map, startRow, pageSize);
    }
    
    /**
     * {@inheritDoc}
     */
    public Vulnerability queryVulnerabilityById(long vulnerabilityId)
    {
        
        return (Vulnerability)super.queryForObject(GlobalConfig.sqlId+"vulnerability.queryById", vulnerabilityId);
    }
    
    /**
     * {@inheritDoc}
     */
    public void updateVulnerability(Vulnerability vulnerability)
    {
        
        super.update(GlobalConfig.sqlId+"vulnerability.update", vulnerability);
        
    }
    
    /**
     * {@inheritDoc}
     */
    public void deleteVulnerability(long vulnerabilityId)
    {
        super.delete(GlobalConfig.sqlId+"vulnerability.delete", vulnerabilityId);
        
    }
    
    /**
     * {@inheritDoc}
     */
    public List<Vulnerability> queryVulnerabilityType(String vulnerabilityType)
    {
        return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"vulnerability.queryType", vulnerabilityType);
        
    }
    
    /** {@inheritDoc} */
    @Override
    public List<Map> exportVulnerability(Map map)
    {
        return super.queryForList(GlobalConfig.sqlId+"vulnerability.export", map);
    }
    
    /** {@inheritDoc} */
    @Override
    public List<Vulnerability> queryVulnerability(Map map)
    {
        return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"vulnerability.query", map);
    }
    
    /** {@inheritDoc} */
    @Override
    public int insertVulnerability(List<Map<String, Object>> list)
    {
    	
        // 注意使用同一个SqlMapClient会话  
        SqlMapClient sqlMapClient = this.getSqlMapClient();
        
        try
        {
            // 开始事务  
            sqlMapClient.startTransaction();
            
            // 开始批处理  
            sqlMapClient.startBatch();
            
            for (int i = 0; i < list.size(); i++)
            {
                // 插入操作  
                sqlMapClient.insert(GlobalConfig.sqlId+"vulnerability.insert", list.get(i));
                
            }
            
            // 执行批处理  
            sqlMapClient.executeBatch();
            
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                // 结束事务  
                sqlMapClient.endTransaction();
                
                return 1;
            }
            catch (SQLException e)
            {
                e.printStackTrace();
            }
        }
        
        return 0;
        
    }
    
    /** {@inheritDoc} */
    @Override
    public void delete1Vulnerability()
    {
        this.getSqlMapClientTemplate().delete(GlobalConfig.sqlId+"vulnerability.delete2");
        
    }
    
    /** {@inheritDoc} */
    @Override
    public Vulnerability queryVulnerabilityUniqueIdentification(String vulnerabilityUniqueIdentification)
    {
        return (Vulnerability)this.getSqlMapClientTemplate()
            .queryForObject(GlobalConfig.sqlId+"vulnerability.queryVulnerabilityUniqueIdentification", vulnerabilityUniqueIdentification);
    }
    
    /** {@inheritDoc} */
    @Override
    public List<Vulnerability> queryVulnerabilityByUniqueIdentification(String vulnerabilityUniqueIdentification)
    {
        return (List<Vulnerability>)this.getSqlMapClientTemplate()
            .queryForList(GlobalConfig.sqlId+"vulnerability.queryVulnerabilityUniqueIdentification", vulnerabilityUniqueIdentification);
    }
    
    /** {@inheritDoc} */
    @Override
    public List<Vulnerability> queryVulnerabilityType()
    {
        
        return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"vulnerability.queryVulnerabilityType");
    }
    
    /** {@inheritDoc} */
    @Override
    public List<Vulnerability> importVulnerability(Vulnerability vulnerability)
    {
        
        return (List<Vulnerability>)super.create(GlobalConfig.sqlId+"vulnerability.importVulnerability", vulnerability);
    }
    
    /** {@inheritDoc} */
    
    @Override
    public List<Map> queryVulnerabilityByType(String vulnerabilityType)
    {
        
        return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"vulnerability.queryByType", vulnerabilityType);
    }
    
    /** {@inheritDoc} */
    
    @Override
    public Map queryVulnerabilityBasic(long vulnerabilityId)
    {
        
        return (Map)this.getSqlMapClientTemplate().queryForObject(GlobalConfig.sqlId+"vulnerability.queryVulnerability", vulnerabilityId);
    }
    
    /** {@inheritDoc} */
    
    @Override
    public List<Map> queryAllVulnerabilityBasic(Map map)
    {
        return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"vulnerability.queryAllVulnerabilityBasic", map);
    }
    
    /** {@inheritDoc} */
    
    @Override
    public int vulnerabilityCountByType(String vulnerabilityType)
    {
        Object ob = null;
        
        try
        {
            ob = super.queryForObject(GlobalConfig.sqlId+"vulnerability.countByType", vulnerabilityType);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        
        // 总条数
        int totalRows = 0;
        
        if (ob != null)
        {
            totalRows = ((Integer)ob).intValue();
        }
        
        return totalRows;
    }
    
    /** {@inheritDoc} */
    
    @Override
    public List<Map> queryVulnerabilityId()
    {
        
        return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"vulnerability.queryVulnerabilityId");
    }
    
    /** {@inheritDoc} */
    
    @Override
    public Vulnerability queryFirstByType(String vulnerabilityType)
    {
        
        return (Vulnerability)super.queryForObject(GlobalConfig.sqlId+"vulnerability.queryFirstByType", vulnerabilityType);
    }
    
    /** {@inheritDoc} */
    @Override
    public void importUpdateVulnerability(Vulnerability vulnerability)
    {
        
        super.update(GlobalConfig.sqlId+"vulnerability.updateimport", vulnerability);
    }
    
    /** {@inheritDoc} */
    
    @Override
    public List<Vulnerability> queryVulnerabilityIdentification()
    {
        // TODO Auto-generated method stub
        return (List<Vulnerability>)this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"vulnerability.queryAllIdentification");
    }
    
    @Override
	public List<Vulnerability> queryBySort(String str, int startRow,
			int pageSize) {
		// TODO Auto-generated method stub
		return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"vulnerability.sort", str, startRow, pageSize);
	}
    
}
