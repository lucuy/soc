package com.soc.dao.risk.ibatis;

import java.util.List;
import java.util.Map;

import com.soc.dao.ibatis.BaseDaoIbatis;
import com.soc.dao.monitor.MonitorAlarmDao;
import com.soc.dao.risk.VulnerabilityAssessmentDao;
import com.soc.model.asset.Asset;
import com.soc.model.conf.GlobalConfig;
import com.soc.model.risk.VulnerabilityAssessment;

public class VulnerabilityAssessmentDaoIbatis extends BaseDaoIbatis implements VulnerabilityAssessmentDao
{
    
    @Override
    public List<VulnerabilityAssessment> queryPage(Map map, int startRow, int pageSize)
    {
        return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"VA.query",map,startRow,pageSize);
    }

    @Override
    public int vulnerabilityAssessmentPagePage(Map map)
    {
        Object ob = null;
        
        // 根据map中存储的条件查询符合条件的用户的记录数
        try
        {
            ob = super.queryForObject(GlobalConfig.sqlId+"countPage.VA", map);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        
        //总条数
        int totalRows = 0;
        
        if (ob != null)
        {
            totalRows = ((Integer)ob).intValue();
        }
        
        return totalRows;
    }

    @Override
    public void addVulnerabilityAssessment(List<VulnerabilityAssessment> VAValue)
    {
        getSqlMapClientTemplate().insert(GlobalConfig.sqlId+"insert.VA", VAValue);
    }
    /**
     * 导入信息
     */
	@Override
	public void insertVAImport(VulnerabilityAssessment vulnerabilityAssessment) {
		getSqlMapClientTemplate().insert(GlobalConfig.sqlId+"insert.VA", vulnerabilityAssessment);
	}

	@Override
	public List<VulnerabilityAssessment> sort(String str, int startRow,
			int pageSize) {
		
		return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"VA.sort",str,startRow,pageSize);
	}

	@Override
	public List<VulnerabilityAssessment> queryListByIp(Map map) {
		
		return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"query.vaIp",map);
	}

	@Override
	public List<VulnerabilityAssessment> queryListByVaNo(Map map) {
		return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"query.vaassetNo",map);
	}

	@Override
	public List<Map> queryAssets(Map map) {
		
		return this.getSqlMapClientTemplate().queryForList(GlobalConfig.sqlId+"riskSQL.exportMould",map);
	}

	@Override
	public Asset queryAssetByIP(long ip) {
		
		return (Asset)this.getSqlMapClientTemplate().queryForObject(GlobalConfig.sqlId+"asset.queryAssetByIp", ip);
	}

	@Override
	public void updateVA(VulnerabilityAssessment va) {
		this.getSqlMapClientTemplate().update(GlobalConfig.sqlId+"update.VAByVaIp", va);
	}

	
}