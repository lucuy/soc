package com.soc.service.knowledge.importLeak;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import com.soc.model.knowledge.Vulnerability;

/**
 * 
 * <漏洞service>
 * <对漏洞信息的操作：查询漏洞信息、删除漏洞信息、修改漏洞信息、导入导出漏洞库>
 * 
 * @author  曹理冬
 * @version  [V100R001C001, 2012-9-10]
 * @see  [相关类/方法]
 * @since  [产品/V100R001C001]
 */
public class ImportVulnerability
{
    /**
     * 解析EXCEL的方法
     * <功能详细描述>
     * @param path File
     * @return List<Vulnerability>
     * @see [类、类#方法、类#成员]
     */
    public static List<Vulnerability> readRead(File path)
    {
        
        String sheetName = null;
        int sheetCount = -1;
        int rowCount = -1;
        int cellCount = -1;
        
        List<List> list1 = new ArrayList<List>();
        Vulnerability vulnerability = null;
        List<Vulnerability> list = new ArrayList<Vulnerability>();
        
        try
        {
            HSSFWorkbook wk = new HSSFWorkbook(new FileInputStream(path));
            
            sheetCount = wk.getNumberOfSheets();
            HSSFSheet sheet = wk.getSheetAt(0);
            
            rowCount = sheet.getLastRowNum();
            for (int i = 2; i <= rowCount; i++)
            {
                
                HSSFRow row = sheet.getRow(i);
                
                cellCount = row.getLastCellNum();
                List<HSSFCell> lists = new ArrayList<HSSFCell>();
                for (int k = 0; k <= cellCount; k++)
                {
                    
                    HSSFCell cell = row.getCell(k);
                    
                    lists.add(cell);
                    
                }
                /* list1.add(lists);*/
                vulnerability = new Vulnerability();
                
                vulnerability.setVulnerabilityUniqueIdentification(lists.get(0).getStringCellValue());
                vulnerability.setVulnerabilityName(lists.get(1).getStringCellValue());
                vulnerability.setVulnerabilitySynopsis(lists.get(2).getStringCellValue());
                vulnerability.setVulnerabilitySolution(lists.get(3).getStringCellValue());
                vulnerability.setVulnerabilitySeeAlso(lists.get(4).getStringCellValue());
                vulnerability.setVulnerabilityType(lists.get(5).getStringCellValue());
                vulnerability.setVulnerabilityRiskFactor(lists.get(6).getStringCellValue());
                vulnerability.setVulnerabilityUpdateDateTime(lists.get(7).getStringCellValue());
                vulnerability.setVulnerabilityCvssMath(lists.get(8).getStringCellValue());
                vulnerability.setVulnerabilityCveID(lists.get(9).getStringCellValue());
                vulnerability.setVulnerabilityPluginPublicationDateTime(lists.get(10).getStringCellValue());
                vulnerability.setVulnerabilityNvtiSrc(lists.get(11).getStringCellValue());
                vulnerability.setVulnerabilityAttack(lists.get(12).getStringCellValue());
                vulnerability.setVulnerabilityPort(lists.get(13).getStringCellValue());
                vulnerability.setVulnerabilityService(lists.get(14).getStringCellValue());
                vulnerability.setVulnerabilityMemo(lists.get(15).getStringCellValue());
                vulnerability.setVulnerabilityOid(lists.get(16).getStringCellValue());
                vulnerability.setVulnerabilityVersion(lists.get(17).getStringCellValue());
                vulnerability.setVulnerabilityCopyright(lists.get(18).getStringCellValue());
                vulnerability.setVulnerabilityTag(lists.get(19).getStringCellValue());
                vulnerability.setVulnerabilityDependencies(lists.get(20).getStringCellValue());
                vulnerability.setVulnerabilityRequiredKeys(lists.get(21).getStringCellValue());
                vulnerability.setVulnerabilityMandatorgKeys(lists.get(22).getStringCellValue());
                vulnerability.setVulnerabilityExcluedKeys(lists.get(23).getStringCellValue());
                vulnerability.setVulnerabilitySignKeyIds(lists.get(24).getStringCellValue());
                vulnerability.setVulnerabilityAscFileName(lists.get(25).getStringCellValue());
                vulnerability.setVulnerabilityAsc(lists.get(26).getStringCellValue());
                vulnerability.setVulnerabilityCheckType(lists.get(27).getStringCellValue());
                vulnerability.setVulnerabilityCvssBase(lists.get(28).getStringCellValue());
                vulnerability.setVulnerabilityPrefs(lists.get(29).getStringCellValue());
                vulnerability.setVulnerabilityTimeout(lists.get(30).getStringCellValue());
                
                list.add(vulnerability);
                
            }
            
        }
        catch (FileNotFoundException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        catch (IOException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return list;
        
    }
    
}
