package com.soc.service.knowledge;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.soc.model.knowledge.Vulnerability;
import com.util.page.Page;
import com.util.page.SearchResult;

/**
 * 
 * <漏洞service>
 * <对漏洞信息的操作：查询漏洞信息、删除漏洞信息、修改漏洞信息、导入导出漏洞库>
 * 
 * @author  曹理冬
 * @version  [V100R001C001, 2012-8-18]
 * @see  com.scan.dao.library.VulnerabilityDao
 * @since  [产品/V100R001C001]
 */
public interface VulnerabilityService extends Serializable
{
    /**
     * 查询漏洞的条数
     * 查询漏洞的条数，进行分页用
     * @param map Map
     * @return int
     * @see com.scan.dao.library.VulnerabilityDao#count(Map)
     */
    public int count(Map map);
    
    /**
     * 查询漏洞列表
     * 根据条件查询分页展示
     * @param map Map
     * @param page Page
     * @return 返回符合查询条件的漏洞信息结果列表
     * @see com.scan.dao.library.VulnerabilityDao#queryVulnerability(Map, int, int)
     */
    public SearchResult query(Map map, Page page);
    
    /**
     * 查询单个漏洞信息
     * 根据传入的id查询漏洞信息
     * @param vulnerabilityId long
     * @return Vulnerability
     * @see com.scan.dao.library.VulnerabilityDao#queryVulnerabilityById(long)
     */
    public Vulnerability queryVulnerabilityById(long vulnerabilityId);
    
    /**
     * 修改漏洞信息
     * 
     * @param vulnerability Vulnerability
     * @return long
     * @see com.scan.dao.library.VulnerabilityDao#updateVulnerability(Vulnerability)
     */
    public long updateVulnerability(Vulnerability vulnerability);
    
    /**
     * 删除某条漏洞信息(标记删除)
     * 根据传入的漏洞Id删除漏洞信息
     * @param vulnerabilityId long
     * @see com.scan.dao.library.VulnerabilityDao#deleteVulnerability(long)
     */
    public void deleteVulnerability(long vulnerabilityId);
    
    /**
     * 根据漏洞类型查询漏洞信息
     * 查询某个类型的所有漏洞信息
     * @param vulnerabilityType String
     * @return List<Vulnerability>
     * @see com.scan.dao.library.VulnerabilityDao#queryVulnerabilityType(String)
     */
    public List<Vulnerability> queryVulnerabilityType(String vulnerabilityType);
    
    /**
     * 导出漏洞查询漏洞信息
     * 
     * @param map Map
     * @return List<Map>
     * @see com.scan.dao.library.VulnerabilityDao#exportVulnerability(Map)
     */
    public List<Map> exportVulnerability(Map map);
    
    /**
     * <查询漏洞信息(不分页)>
     * 
     * @param map Map
     * @return List<Vulnerability>
     * @see com.scan.dao.library.VulnerabilityDao#queryVulnerability(Map)
     */
    public List<Vulnerability> query(Map map);
    
    /**
     * 插入漏洞信息
     * 
     * @param list List<Map<String, Object>>
     * @return int
     * @see com.scan.dao.library.VulnerabilityDao#insertVulnerability(List)
     */
    public int upgradeVulnerability(List<Map<String, Object>> list);
    
    /**
     * 删除漏洞信息
     * 删除所有的漏洞
     * @param 
     * @return 
     * @see com.scan.dao.library.VulnerabilityDao#delete1Vulnerability()
     */
    public void deleteVulnerability();
    
    /**
     * 根据漏洞编号查询漏洞信息
     * 
     * @param vulnerabilityUniqueIdentification String
     * @return Vulnerability
     * @see com.scan.dao.library.VulnerabilityDao#queryVulnerabilityByUniqueIdentification(String)
     */
    public Vulnerability queryVulnerabilityUniqueIdentification(String vulnerabilityUniqueIdentification);
    
    /**
     * 查询漏洞库内所有漏洞类型
     * 
     * @param 
     * @return List<Vulnerability>
     * @see com.scan.dao.library.VulnerabilityDao#queryVulnerabilityType()
     */
    public List<String> queryVulnerabilityType();
    
    /**
     * 导入漏洞库信息
     * 
     * @param vulnerability Vulnerability
     * @return List<Vulnerability>
     * @see com.scan.dao.library.VulnerabilityDao#importVulnerability(Vulnerability)
     */
    public List<Vulnerability> importVulnerability(Vulnerability vulnerability);
    
    /**
     * 根据漏洞编号查询漏洞信息
     * 
     * @param vulnerabilityUniqueIdentification String
     * @return List<Vulnerability>
     * @see com.scan.dao.library.VulnerabilityDao#queryVulnerabilityUniqueIdentification(String)
     */
    public List<Vulnerability> queryVulnerabilityByUniqueIdentification(String vulnerabilityUniqueIdentification);
    /**
     * <根据漏洞类型查询漏洞信息>
     * <功能详细描述>
     * @param vulnerabilityType String
     * @return List<Map>
     * @see [类、类#方法、类#成员]
     */
    public List<Map> queryVulnerabilityByType(String vulnerabilityType);
    /**
     * <查询出漏洞id和漏洞名称>
     * <根据漏洞id查询出漏洞id和漏洞名称>
     * @param vulnerabilityId
     * @return Map
     * @see [类、类#方法、类#成员]
     */
    public Map queryVulnerabilityBasic(long vulnerabilityId);
    /**
     * <查询出所有符合条件的的漏洞信息>
     * <查询出所有符合条件的的漏洞信息>
     * @return List<Map>
     * @see [类、类#方法、类#成员]
     */
    public List<Map> queryAllVulnerabilityBasic(Map map);
    /**
     * <查出某种类型的漏洞个数>
     * <查出某种类型的漏洞个数>
     * @return int
     * @see [类、类#方法、类#成员]
     */
    public int vulnerabilityCountByType(String vulnerabilityType);
    /**
     * <查询出漏洞所有id>
     * <查询出漏洞所有id>
     * @return
     * @see [类、类#方法、类#成员]
     */
    public List<Map> queryVulnerabilityId();
    /**
     * <查处符合条件的第一条漏洞信息>
     * <查处符合条件的第一条漏洞信息>
     * @param vulnerabilityType
     * @return Vulnerability
     * @see [类、类#方法、类#成员]
     */
    public Vulnerability queryFirstByType(String vulnerabilityType);
    /**
     * 修改漏洞信息
     * 导入时候修改漏洞信息
     * @param vulnerability Vulnerability
     * @return long
     * @see com.scan.dao.library.VulnerabilityDao#importUpdateVulnerability(Vulnerability)
     */
    public long importUpdateVulnerability(Vulnerability vulnerability);
    
    /**
     * 查询库内的所有漏洞信息编号
     *
     * @return List<String>
     * @see com.scan.dao.library.VulnerabilityDao#queryVulnerabilityIdentification()
     */
    public List<String> queryAllIdentification();
    
    /**
     * 查询库内所有漏洞，并排序
     *
     * @return List<Vulnerability>
     * @see [类、类#方法、类#成员]
     */
    public SearchResult queryVulnerabilityBySort(Map map,Page page);
    
    
    
}
