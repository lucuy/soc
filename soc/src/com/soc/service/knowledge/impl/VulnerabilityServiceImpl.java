package com.soc.service.knowledge.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.soc.dao.knowledgemanger.VulnerabilityDao;
import com.soc.model.knowledge.Vulnerability;
import com.soc.service.impl.BaseServiceImpl;
import com.soc.service.knowledge.VulnerabilityService;
import com.util.page.Page;
import com.util.page.SearchResult;

/**
 * 
 * <漏洞Service实现层>
 * <对漏洞信息的操作：查询漏洞信息、删除漏洞信息、修改漏洞信息>
 * 
 * @author  曹理冬
 * @version  [V100R001C001]
 * @see  [相关类/方法]
 * @since  [scan v3.6.0.1]
 */
public class VulnerabilityServiceImpl extends BaseServiceImpl implements VulnerabilityService
{
    /**
    * 注释内容
    */
    private static final long serialVersionUID = 1L;
    
    //漏洞管理业务类
    private VulnerabilityDao vulnerabilityDao;
    
    /**
     * {@inheritDoc}
     */
    public int count(Map map)
    {
        
        return vulnerabilityDao.count(map);
    }
    
    /**
     * {@inheritDoc}
     */
    public SearchResult<Vulnerability> query(Map map, Page page)
    {
        // 按Map中存储的条件查找用户列表
        int rowsCount = vulnerabilityDao.count(map);
        page.setTotalCount(rowsCount);
        List<Vulnerability> list = vulnerabilityDao.queryVulnerability(map, page.getStartIndex(), page.getPageSize());
        
        // 对查找的用户列表做分页处理
        SearchResult<Vulnerability> sr = new SearchResult<Vulnerability>();
        sr.setList(list);
        sr.setPage(page);
        
        return sr;
    }
    
    /**
     * {@inheritDoc}
     */
    public Vulnerability queryVulnerabilityById(long vulnerabilityId)
    {
        return vulnerabilityDao.queryVulnerabilityById(vulnerabilityId);
        
    }
    
    /**
     * {@inheritDoc}
     */
    public long updateVulnerability(Vulnerability vulnerability)
    {
        
        vulnerability.setVulnerabilityPluginLastModificationDateTime(new Date());
        
        // 设置可见
        vulnerability.setVulnerabilityIsDelete(1);
        
        // 执行更新操作
        vulnerabilityDao.updateVulnerability(vulnerability);
        
        return 1;
    }
    
    /**
     * {@inheritDoc}
     */
    public void deleteVulnerability(long vulnerabilityId)
    {
        vulnerabilityDao.deleteVulnerability(vulnerabilityId);
        
    }
    
    /**
     * {@inheritDoc}
     */
    public List<Vulnerability> queryVulnerabilityType(String vulnerabilityType)
    {
        
        return vulnerabilityDao.queryVulnerabilityType(vulnerabilityType);
    }
    
    /**
     * {@inheritDoc}
     */
    public List<Map> exportVulnerability(Map map)
    {
        
        return vulnerabilityDao.exportVulnerability(map);
    }
    /**
     * {@inheritDoc}
     */
    public List<Map> queryVulnerabilityByType(String vulnerabilityType)
    {
        
        return vulnerabilityDao.queryVulnerabilityByType(vulnerabilityType);
    }
    @Override
    public List<Vulnerability> query(Map map)
    {
        return vulnerabilityDao.queryVulnerability(map);
    }
    
  /*  @Override
    public int upgradeVulnerability(Map map)
    {
        
        return vulnerabilityDao.insertVulnerability(map);
        
    }*/
    
    /**
     * {@inheritDoc}
     */
    public void deleteVulnerability()
    {
        
        vulnerabilityDao.delete1Vulnerability();
        
    }
    
    /**
     * {@inheritDoc}
     */
    public Vulnerability queryVulnerabilityUniqueIdentification(String vulnerabilityUniqueIdentification)
    {
        return vulnerabilityDao.queryVulnerabilityUniqueIdentification(vulnerabilityUniqueIdentification);
    }
    
    /**
     * {@inheritDoc}
     */
    public List<String> queryVulnerabilityType()
    { 
        List<Vulnerability> list = new ArrayList<Vulnerability>();
        list = vulnerabilityDao.queryVulnerabilityType();
        
        List<String> list1 = new ArrayList<String>();
        
        for(Vulnerability v : list)
        {
            list1.add(v.getVulnerabilityType());
        }
        
        return list1;
        
        /*return vulnerabilityDao.queryVulnerabilityType();*/
    }
    
    @Override
    public List<Vulnerability> importVulnerability(Vulnerability vulnerability)
    {
        
        return (List<Vulnerability>)vulnerabilityDao.importVulnerability(vulnerability);
    }
    
    @Override
    public List<Vulnerability> queryVulnerabilityByUniqueIdentification(String vulnerabilityUniqueIdentification)
    {
        
        return vulnerabilityDao.queryVulnerabilityByUniqueIdentification(vulnerabilityUniqueIdentification);
    }

    
    public long importUpdateVulnerability(Vulnerability vulnerability)
    {
        vulnerabilityDao.importUpdateVulnerability(vulnerability);
        return 0;
    }
    
    
    
    public VulnerabilityDao getVulnerabilityDao()
    {
        return vulnerabilityDao;
    }
    
    public void setVulnerabilityDao(VulnerabilityDao vulnerabilityDao)
    {
        this.vulnerabilityDao = vulnerabilityDao;
    }
    
    public static long getSerialversionuid()
    {
        return serialVersionUID;
    }

    /** {@inheritDoc} */
     
    @Override
    public int upgradeVulnerability(List<Map<String, Object>> list)
    { 
        
        // TODO Auto-generated method stub
        return vulnerabilityDao.insertVulnerability(list);
    }

    /** {@inheritDoc} */
     
    @Override
    public List<String> queryAllIdentification()
    {
        // TODO Auto-generated method stub
        List<Vulnerability> list =  new ArrayList<Vulnerability>();
        
        list = vulnerabilityDao.queryVulnerabilityIdentification();
        
        List<String> list1 = new ArrayList<String>();
        
        for( Vulnerability v : list)
        {
            list1.add(v.getVulnerabilityUniqueIdentification());
            
        }
        return list1;
    }

    /** {@inheritDoc} */
     
    @Override
    public Map queryVulnerabilityBasic(long vulnerabilityId)
    {
        
        return vulnerabilityDao.queryVulnerabilityBasic(vulnerabilityId);
    }

    /** {@inheritDoc} */
     
    @Override
    public List<Map> queryAllVulnerabilityBasic(Map map)
    {
        return vulnerabilityDao.queryAllVulnerabilityBasic(map);
    }

    /** {@inheritDoc} */
     
    @Override
    public int vulnerabilityCountByType(String vulnerabilityType)
    {
        return vulnerabilityDao.vulnerabilityCountByType(vulnerabilityType);
    }

    /** {@inheritDoc} */
     
    @Override
    public List<Map> queryVulnerabilityId()
    {
        
        return vulnerabilityDao.queryVulnerabilityId();
    }

    /** {@inheritDoc} */
     
    @Override
    public Vulnerability queryFirstByType(String vulnerabilityType)
    {
        
        return vulnerabilityDao.queryFirstByType(vulnerabilityType);
    } 
    
    /** {@inheritDoc} */
   	@Override
   	public SearchResult queryVulnerabilityBySort(Map map, Page page) {
   		
   		int rowsCount = vulnerabilityDao.count(map);
   		page.setTotalCount(rowsCount);
   		String field=(String)map.get("field");
   		String sortType=(String)map.get("sortType");
   		
   		String str=" \""+field+"\""+" "+sortType;
   		List<Vulnerability> list = vulnerabilityDao.queryBySort(str, page.getStartIndex(),
   				page.getPageSize());
   	    SearchResult sr = new SearchResult();
   	    sr.setList(list);
   	    sr.setPage(page) ; 
   		return sr;
   	} 
}
