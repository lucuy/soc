package com.soc.service.risk.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.soc.dao.risk.VulnerabilityAssessmentDao;
import com.soc.model.asset.Asset;
import com.soc.model.risk.VulnerabilityAssessment;
import com.soc.service.asset.AssetGroupService;
import com.soc.service.asset.AssetService;
import com.soc.service.impl.BaseServiceImpl;
import com.soc.service.risk.VulnerabilityAssessmentService;
import com.util.IpConvert;
import com.util.page.Page;
import com.util.page.SearchResult;
/**
 * 
 * @author yinhaiping
 *
 */
public class VulnerabilityAssessmentServiceImpl extends BaseServiceImpl implements VulnerabilityAssessmentService
{
    private VulnerabilityAssessmentDao vulnerabilityAssessmentDao;
    private VulnerabilityAssessment VA;
    private List<VulnerabilityAssessment> VAList;
    private AssetGroupService assetGroupManager;
    private AssetService assetManager;
    @Override
    public SearchResult queryPage(Map map, Page page)
    { 
		StringBuffer sbf = new StringBuffer();
		int falg = 0;
		Map map1 = new HashMap();
		map1.put("assetGroupId", map.get("assetGroupId").toString());
		List<Asset> listAsset= assetManager.query(map1);
		
		for (Asset asset : listAsset) {
			if(falg==0){
				sbf.append("'"+IpConvert.IpString(asset.getAssetIp())+"'");
			}else{
				sbf.append(",'"+IpConvert.IpString(asset.getAssetIp())+"'");
			}
			falg++;
		}
		
			map.put("vaip", sbf.toString());
		
		
        int rowsCount = vulnerabilityAssessmentDao.vulnerabilityAssessmentPagePage(map);
        page.setTotalCount(rowsCount);
        List<VulnerabilityAssessment> list = vulnerabilityAssessmentDao.queryPage(map, page.getStartIndex(), page.getPageSize());
        
        SearchResult sr = new SearchResult();
        sr.setList(list);
        sr.setPage(page);
        return sr;
    }
    public VulnerabilityAssessmentDao getVulnerabilityAssessmentDao()
    {
        return vulnerabilityAssessmentDao;
    }
    public void setVulnerabilityAssessmentDao(VulnerabilityAssessmentDao vulnerabilityAssessmentDao)
    {
        this.vulnerabilityAssessmentDao = vulnerabilityAssessmentDao;
    }
    @Override
    public void addVulnerabilityAssessment()
    {
        VA.setVulnerabilityAssessmentAssetNo(10);
        VA.setVulnerabilityAssessmentAssetName("2");
        VA.setVulnerabilityAssessmentIp("2");
        VA.setVulnerabilityAssessmentEmergencyRisk(2);
        VA.setVulnerabilityAssessmentSeniorRisk(2);
        VA.setVulnerabilityAssessmentIntermediateRisk(2);
        VA.setVulnerabilityAssessmentLlowerRisk(2);
        VA.setVulnerabilityAssessmentIinformationRisk(2);
        VA.setVulnerabilityAssessmentRiskValue(2);
        VA.setVulnerabilityAssessmentRiskLevels(2);
        VA.setVulnerabilityAssessmentVulnerabilityValue(2);
        VAList.add(VA);
        vulnerabilityAssessmentDao.addVulnerabilityAssessment(VAList);
    }
    /**
     * 导入信息
     */
	@Override
	public void insertVAImport(VulnerabilityAssessment vulnerabilityAssessment) {
		Map map = new HashMap();
		map.put("keyword", vulnerabilityAssessment.getVulnerabilityAssessmentIp());
		List<VulnerabilityAssessment> Valist = vulnerabilityAssessmentDao.queryListByIp(map);
		if(Valist.size()>0){
			for (VulnerabilityAssessment va2 : Valist) {
				vulnerabilityAssessmentDao.updateVA(va2);
			}
		}else{
		vulnerabilityAssessmentDao.insertVAImport(vulnerabilityAssessment);
		}
		
	}
	@Override
	public SearchResult sort(Map map, Page page) {
		int rowsCount = vulnerabilityAssessmentDao.vulnerabilityAssessmentPagePage(map);
        page.setTotalCount(rowsCount);
        String field=(String)map.get("field");
        String sortType=(String)map.get("sortType");
        String str=" \""+field+"\""+" "+sortType;
        List<VulnerabilityAssessment> list = vulnerabilityAssessmentDao.sort(str, page.getStartIndex(), page.getPageSize());
        SearchResult sr = new SearchResult() ; 
        sr.setList(list);
        sr.setPage(page);
        return sr;
	}
	@Override
	public List<VulnerabilityAssessment> queryListByIp(Map map) {
		return vulnerabilityAssessmentDao.queryListByIp(map);
	}
	@Override
	public List<VulnerabilityAssessment> queryListByAssetNo(Map map) {
		return vulnerabilityAssessmentDao.queryListByVaNo(map);
	}
	@Override
	public List<Map> queryAssets(Map map) {
		 String assetGroupId= map.get("assetGroupId").toString();
			long	assetGroupIds = Integer.parseInt(assetGroupId);
				if(assetGroupIds==1){
					map.remove("assetGroupId");
				}else{
					String assetGroupIdss=assetGroupManager.getAllGroupIdByID(assetGroupIds);
					map.put("assetGroupId", assetGroupIdss);
				}
				List<Map> mapList = new ArrayList<Map>();
				List<Map> list=vulnerabilityAssessmentDao.queryAssets(map);
				for (Map map2 : list) {
					String ip=IpConvert.IpString(Long.parseLong(map2.get("ASSET_IP").toString()));
					map2.remove("ASSET_IP");
					map2.put("ASSET_IP", ip);
					
				}
		return list; 
	}
	
	@Override
	public void updateVA(VulnerabilityAssessment vulnerabilityAssessment) {
		 vulnerabilityAssessmentDao.updateVA(vulnerabilityAssessment);
		
	}
	public AssetGroupService getAssetGroupManager() {
		return assetGroupManager;
	}
	public void setAssetGroupManager(AssetGroupService assetGroupManager) {
		this.assetGroupManager = assetGroupManager;
	}
	public AssetService getAssetManager() {
		return assetManager;
	}
	public void setAssetManager(AssetService assetManager) {
		this.assetManager = assetManager;
	}
	
    
}