package com.soc.service.risk.importfile;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.soc.model.risk.VulnerabilityAssessment;

/**
 * 风险脆弱性评估解析xml
 * @author lichen
 *
 */
public class ParseVulnerabilityAssessment {
	public static List<VulnerabilityAssessment> parse(File file){
		List<VulnerabilityAssessment> list=new ArrayList<VulnerabilityAssessment>();
		//创建解析器工厂
		DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
		try {
			//得到解析器
			DocumentBuilder db=dbf.newDocumentBuilder();
			//解析xml
			Document document=db.parse(file);
			//得到根节点
			Element root=document.getDocumentElement();
			NodeList rootList = root.getElementsByTagName("reportForm");
					for (int n = 0; n < rootList.getLength(); n++) {
						VulnerabilityAssessment va = new VulnerabilityAssessment();
						NodeList nvaChilds = rootList.item(n).getChildNodes();
						//System.out.println(nvaChilds.getLength());
						for (int i = 0; i < nvaChilds.getLength(); i++) {
							Node nva = nvaChilds.item(i);
							//System.out.println(nva.getNodeName());
							if(nva.getNodeName().equals("reportFormAssetGraded")){
								//得到所有子节点
								NodeList nodelist=nva.getChildNodes();
								//System.out.println(nodelist.getLength());
								//遍历所有子节点
								for (int j = 0; j < nodelist.getLength(); j++) {
									if (nodelist.item(j).getNodeName().equals("assetGraded")) {
										NodeList assetList = nodelist.item(j).getChildNodes();
										//System.out.println(assetList.getLength());
										for (int x = 0; x < assetList.getLength(); x++) {
											//System.out.println(assetList.item(x).getNodeName());
											if (assetList.item(x).getNodeName().equals("assetGradedAssetName")) {
												va.setVulnerabilityAssessmentAssetName(assetList.item(x).getTextContent());
												continue;
											}
											if (assetList.item(x).getNodeName().equals("assetGradedAssetIp")) {
												va.setVulnerabilityAssessmentIp(assetList.item(x).getTextContent());
												continue;
											}
//											if (nodelist.item(j).getNodeName().equals("assetGradedAssetWorth")) {
//												//va.setv(nodelist.item(j).getTextContent());
//											}
											if (assetList.item(x).getNodeName().equals("assetGrade")) {
												//System.out.println(assetList.item(x).getTextContent());
												va.setVulnerabilityAssessmentRiskValue(Integer.parseInt(assetList.item(x).getTextContent()));
												continue;
											}
//											if (nodelist.item(j).getNodeName().equals("assetGradedVulnerabilityTotel")) {
//												va.setvAAssetName(nodelist.item(j).getTextContent());
//											}
											if (assetList.item(x).getNodeName().equals("assetGradedUrgent")) {
												va.setVulnerabilityAssessmentEmergencyRisk(Integer.parseInt(assetList.item(x).getTextContent()));
												continue;
											}
											if (assetList.item(x).getNodeName().equals("assetGradedHight")) {
												va.setVulnerabilityAssessmentSeniorRisk(Integer.parseInt(assetList.item(x).getTextContent()));
												continue;
											}
											if (assetList.item(x).getNodeName().equals("assetGradedMedium")) {
												va.setVulnerabilityAssessmentIntermediateRisk(Integer.parseInt(assetList.item(x).getTextContent()));
												continue;
											}
											if (assetList.item(x).getNodeName().equals("assetGradedLow")) {
												va.setVulnerabilityAssessmentLlowerRisk(Integer.parseInt(assetList.item(x).getTextContent()));
												continue;
											}
											if (assetList.item(x).getNodeName().equals("assetGradedInfo")) {
												va.setVulnerabilityAssessmentIinformationRisk(Integer.parseInt(assetList.item(x).getTextContent()));
												continue;
											}
											if (assetList.item(x).getNodeName().equals("assetGradedAssetRiskGrade")) {
												if (assetList.item(x).getTextContent().equals("非常危险")) {
													va.setVulnerabilityAssessmentRiskLevels(5);
												}else if (assetList.item(x).getTextContent().equals("危险")) {
													va.setVulnerabilityAssessmentRiskLevels(4);
												}else if (assetList.item(x).getTextContent().equals("较危险")) {
													va.setVulnerabilityAssessmentRiskLevels(3);
												}else if (assetList.item(x).getTextContent().equals("较安全")) {
													va.setVulnerabilityAssessmentRiskLevels(2);
												}else if (assetList.item(x).getTextContent().equals("安全")) {
													va.setVulnerabilityAssessmentRiskLevels(1);
												}
												continue;
											}
										}
									}
									
									
									
								}
								
							}
						}
						list.add(va);
				}
				
		
				
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (DOMException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
}
