package com.soc.webapp.action.risk;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

//import org.antlr.runtime.EarlyExitException;
import org.apache.struts2.ServletActionContext;
import org.htmlparser.util.NodeList;

import com.soc.model.asset.Asset;
import com.soc.model.risk.VulnerabilityAssessment;
import com.soc.model.user.User;
import com.soc.service.asset.AssetService;
import com.soc.service.audit.AuditService;
import com.soc.service.risk.VulnerabilityAssessmentService;
import com.soc.service.risk.export.ExcelVulnerabilityAssessmentModel;
import com.soc.service.risk.importfile.ParseVulnerabilityAssessment;
import com.soc.webapp.action.BaseAction;
import com.util.DateUtil;
import com.util.FileUtil;
import com.util.Htmlparser;
import com.util.IpConvert;
import com.util.ReadAndWriteFileUtil;
import com.util.StringUtil;
import com.util.page.Page;
import com.util.page.SearchResult;

public class VulnerabilityAssessmentAction extends BaseAction
{
    private static final long serialVersionUID = 1L;
    
    private VulnerabilityAssessmentService vulnerabilityAssessmentManager;
    
    private List<VulnerabilityAssessment> vulnerabilityAssessmentList;
    
    private File upTar; //上传文件
    
    private String upTarFileName; //文件名称
    
    private String keyword;
    private String vulnerabilityAssessmentAssetName;
    private String vulnerabilityAssessmentRiskLevels;
    private String vulnerabilityAssessmentRiskIp;
    private String vulnerabilityAssessmentRiskAbility;
    private AssetService assetManager;
    
	// 审计业务管理类
	private AuditService auditManager;
	
    //请求的action字符串
    private String actionStr ="query.action"; 
    
    // 排序Type
    private String sortType;
    
    // 要查询的字段
    private String field ; 
    
    // 导入文件的类型
    private String typeid;
    
    private  String abc;
  //返回的结果字符串
  	private String info ; 

    public String query(){
    	HttpServletRequest request = super.getRequest();
        
        Page page = null;
        SearchResult sr = null;
        
        // 处理数据分页的起始条数
        String startIndex = request.getParameter("startIndex");
        if (StringUtil.isNotBlank(startIndex)) {
			page = new Page(Page.DEFAULT_PAGE_SIZE, Integer.valueOf(startIndex));
		} else {
			page = new Page(Page.DEFAULT_PAGE_SIZE, 0);
		}
        
        // 接收查询条件，并存储到map中
        Map<String, Object> map = new HashMap<String, Object>();
        if (request.getParameter("keyword") != null)
        {
            try
            {
                
                keyword = java.net.URLDecoder.decode(keyword, "UTF-8");
                
            }
            catch (UnsupportedEncodingException e)
            {
                e.printStackTrace();
            }
            
            map.put("keyword", keyword);
        }
        if (StringUtil.isNotBlank(vulnerabilityAssessmentAssetName))
        {
             map.put("vAAssetName", vulnerabilityAssessmentAssetName);
        }
        if (StringUtil.isNotBlank(vulnerabilityAssessmentRiskAbility))
        {
             map.put("vARiskAbility", Integer.valueOf(vulnerabilityAssessmentRiskAbility));
        }
        if (StringUtil.isNotBlank(vulnerabilityAssessmentRiskIp)) {
			map.put("vARiskIp", vulnerabilityAssessmentRiskIp);
		}
        long groupId=((User) this.getSession().getAttribute("SOC_LOGON_USER")).getAssetGroupid();
		
		 map.put("assetGroupId", groupId);	
        //根据条件查询相应审计数据
        sr = vulnerabilityAssessmentManager.queryPage(map, page);
        
        if (sr != null)
        {
        	vulnerabilityAssessmentList = (List<VulnerabilityAssessment>)sr.getList();
            request.setAttribute("associationList", vulnerabilityAssessmentList);
            request.setAttribute("Page", sr.getPage());
        }
        else
        {
            request.setAttribute("Page", new Page(Page.DEFAULT_PAGE_SIZE, 0));
        }
        return SUCCESS;
    }
    /**
	 * <导出模板> <功能详细描述>
	 * 
	 * @see [类、类#方法、类#成员]
	 */
    public void exportMould(){
    	LOG.info("[AssetRisk] enter method exportModel() ...");
    	ExcelVulnerabilityAssessmentModel excelsys =new ExcelVulnerabilityAssessmentModel();
        HttpServletResponse response = super.getResponse();
        
        long groupId=((User) this.getSession().getAttribute("SOC_LOGON_USER")).getAssetGroupid();
        Map<String, Object> map = new HashMap<String, Object>();
		
		 map.put("assetGroupId", groupId);	
        excelsys.exportModel(vulnerabilityAssessmentManager.queryAssets(map), "脆弱性评估模板Excel报表");
        try
        {
            // 中文文件名需要编码
            String fileName = "VulnerabilityAssessment_Mould_" + DateUtil.curDateStr8();
            response.setContentType("application/ms-excel");
            response.setHeader("Content-Disposition", "attachment;Filename=" + fileName + ".xls");
            OutputStream os = response.getOutputStream();
            excelsys.getGwb().write(os);
            os.flush();
            os.close();
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }
    public String importVA(){
    	
    	if (typeid.equals("xml")) {
    		importXml();	
		}else if(typeid.equals("html")) {
			try {
				importHtml();
			} catch (Exception e) {
				e.printStackTrace();
				info = "alert" ; 
			}
		}
    	typeid = null;
        return SUCCESS;
    }
    /**
     * 导入Html格式的文件
     * @throws Exception 
     */
    private void importHtml() throws Exception {

		if (upTar != null && upTarFileName != null) {
			String path = ServletActionContext.getServletContext().getRealPath(
					"/riskfile");

			File importExcel = new File(new File(path), upTarFileName);
			String htmlContext = null;
			
				FileUtil.copyFile(upTar, importExcel);
			
			// 读取导入html的内容
			htmlContext = ReadAndWriteFileUtil.readFileContentUTF8(upTar);
			Map<String, String> attr = new HashMap<String, String>();// 放参数用的map
			
			//attr.put("width", "97%");// 放那个table的属性
			//attr.put("align", "center");
			attr.put("soc", "soc");
			
			//<table width=97% align=center border=1 cellpadding=0 cellspacing=0 bordercolordark=#A6E9FF bordercolorlight=#000099>
			NodeList table = Htmlparser.getTagContent(htmlContext, "table", attr);
			//做正则匹配 匹配内容:在线主机概要信息
		String tableWeUser = table.elementAt(0).toHtml();
			/*for (int i = 0; i < table.size(); i++) {
				String htmlTemp = table.elementAt(i).toHtml();//获得table的内容 然后再去解析这个table
						if (htmlTemp.contains("IP地址")
						&&htmlTemp.contains("安全等级")
						&&htmlTemp.contains("漏洞总数")
						&&htmlTemp.contains("紧急")
						&&htmlTemp.contains("高")
						&&htmlTemp.contains("中")
						&&htmlTemp.contains("低")
						&&htmlTemp.contains("信息")
						) {
					tableWeUser = htmlTemp;
					break;
				}
			}*/
			if (!tableWeUser.equals("")) {
				attr.clear();//清空下放属性的map
				attr.put("soc", "soc");
				attr.put("align", "center");
				List<String> ipList = new ArrayList<String>();//放ip的数组 因为这个放ip 但是上面取出来的是
				NodeList listIp = Htmlparser.getTagContent(tableWeUser, "td", attr);
				for (int i = 0; i < listIp.size(); i++) {
					String s = listIp.elementAt(i).toPlainTextString();
						ipList.add(s);
				}
				attr.clear();
				attr.put("class", "r0");// 放Hight的td的属性
				NodeList listLevel5 = Htmlparser.getTagContent(tableWeUser, "td",
						attr);//放级别是5的
				for (int i = 0; i < listLevel5.size(); i++) {
					System.out.println(listLevel5.elementAt(i).toPlainTextString());
					
				}

			
				
				attr.clear();
				attr.put("class", "r1");// 放Medium的td的属性
				NodeList listLevel4 = Htmlparser.getTagContent(tableWeUser, "td",
						attr);
				attr.clear();
				attr.put("class", "r2");// 放Medium的td的属性
				NodeList listLevel3 = Htmlparser.getTagContent(tableWeUser, "td",
						attr);
				attr.clear();
				attr.put("class", "r3");// 放Medium的td的属性
				NodeList listLevel2 = Htmlparser.getTagContent(tableWeUser, "td",
						attr);
				attr.clear();
				attr.put("class", "r4");// 放Medium的td的属性
				NodeList listLevel1 = Htmlparser.getTagContent(tableWeUser, "td",
						attr);
				// 循环生类
				// List<VulnerabilityAssessment> riskValueList = new
				// ArrayList<VulnerabilityAssessment>();
				for (int i = 0; i < ipList.size(); i++) {
					VulnerabilityAssessment vuln = new VulnerabilityAssessment();
					Map<String, String> assetIpMap = new HashMap<String, String>();// 放资产ip
					String ip = ipList.get(i);
					assetIpMap.put("selAssetMac", ip);// 把ip放进去
					List<Asset> assetList = this.assetManager.query(assetIpMap);
					if (assetList.size() == 0) {
						// 说明没有资产
						continue;
					}
					Asset asset = assetList.get(0);// 这里找到的是一个list
					// 因为ip唯一这里取第一个就行了
					vuln.setVulnerabilityAssessmentAssetName(asset.getAssetName());// 放资产名字
					vuln.setVulnerabilityAssessmentIp(ip);// 放资产ip
					vuln.setVulnerabilityAssessmentAssetNo(asset.getAssetId());// 放id
					vuln.setVulnerabilityAssessmentEmergencyRisk(Integer.parseInt(listLevel5.elementAt(i).toPlainTextString()));//紧急  五级的
					vuln.setVulnerabilityAssessmentSeniorRisk(Integer.parseInt(listLevel4.elementAt(i).toPlainTextString()));//四级
					vuln.setVulnerabilityAssessmentIntermediateRisk(Integer.parseInt(listLevel3.elementAt(i).toPlainTextString()));//三级
					vuln.setVulnerabilityAssessmentLlowerRisk(Integer.parseInt(listLevel2.elementAt(i).toPlainTextString()));//二级
					vuln.setVulnerabilityAssessmentIinformationRisk(Integer.parseInt(listLevel1.elementAt(i).toPlainTextString()));//1级
					int vAVulnerabilityValue = Integer.parseInt(listLevel5.elementAt(i).toPlainTextString()) * 60 + Integer.parseInt(listLevel4.elementAt(i).toPlainTextString()) * 30 + Integer.parseInt(listLevel3.elementAt(i).toPlainTextString())*10+Integer.parseInt(listLevel2.elementAt(i).toPlainTextString());//他有自己的公式 风险值		
					vuln.setVulnerabilityAssessmentRiskValue(vAVulnerabilityValue);//风险值
					if (vAVulnerabilityValue>=60) {
						vuln.setVulnerabilityAssessmentVulnerabilityValue(4);
					}else if (vAVulnerabilityValue>=30&&vAVulnerabilityValue<60) {
						vuln.setVulnerabilityAssessmentVulnerabilityValue(3);
					}else if (vAVulnerabilityValue>=10&&vAVulnerabilityValue<30) {
						vuln.setVulnerabilityAssessmentVulnerabilityValue(2);
					}else 
						vuln.setVulnerabilityAssessmentVulnerabilityValue(1);
					// riskValueList.add(vuln);
					Map map = new HashMap();
					map.put("assetId", asset.getAssetId());
					map.put("value", vuln.getVulnerabilityAssessmentVulnerabilityValue());
					assetManager.updateAssetVavulNerabilityValue(asset.getAssetId(),map);//更新资产的脆弱性值
					map.put("keyword", asset.getAssetMac());
					//System.out.println(vulnerabilityAssessmentManager.queryListByIp(map).get(i).getvAIp());
					List a = vulnerabilityAssessmentManager.queryListByIp(map);
					if (a.size()==0) {
						this.vulnerabilityAssessmentManager.insertVAImport(vuln);
					}else {
						vulnerabilityAssessmentManager.updateVA(vuln);
					}
			}
			}else {
				throw new  Exception();
			}
			}

    }
    
    private void importXml(){
    	log.info("[SecurityBulletinAction] Enter method importSecurity.....");
		log.info(upTar);
		if (upTar != null && upTarFileName != null) {
			String path = ServletActionContext.getServletContext().getRealPath("/import");

			File importXML = new File(new File(path), upTarFileName);

			try {
				FileUtil.copyFile(upTar, importXML);
			} catch (IOException e) {
				e.printStackTrace();
			}

			List<VulnerabilityAssessment> list = new ArrayList<VulnerabilityAssessment>();

			list = ParseVulnerabilityAssessment.parse(importXML);
			Map<String, Object> map=new HashMap<String, Object>();
			
			for (int i = 0; i < list.size(); i++) {
				  map.put("vaIp",IpConvert.iPTransition(list.get(i).getVulnerabilityAssessmentIp()));			
					
                  int vaNo = assetManager.queryVaNo(map);
                  if (vaNo>0)
                  {
                	  list.get(i).setVulnerabilityAssessmentAssetNo(vaNo);	
                	  //插入资产
                	  List<VulnerabilityAssessment> vList = new ArrayList<VulnerabilityAssessment>();
                	  map.put("assetNo", vaNo);
                	  vList = vulnerabilityAssessmentManager.queryListByAssetNo(map);
                	  
                	  if (vList==null || vList.size()==0) {
                		  vulnerabilityAssessmentManager.insertVAImport(list.get(i));
                		  
                		  List<String> fieldList = new ArrayList<String>();
                		  fieldList.add(list.get(i).getVulnerabilityAssessmentAssetName()+"("+ list.get(i).getVulnerabilityAssessmentAssetName() +")");
                	      // 审计日志
                		  auditManager.insertByInsertOperator(((User) this.getSession()
                				.getAttribute("SOC_LOGON_USER")).getUserId(), "资产", super
                				.getRequest().getRemoteAddr(), fieldList);
                	  }
                  	
                  }
			}

		}
    }
    
    
    /**
     * <排序>
     * @return
     */
    public String sort(){
    	LOG.info("[VulnerabilityAction] enter method sort() ...");
        HttpServletRequest request = super.getRequest();
        
        Page page = null;
        SearchResult sr = null;
        
        HttpSession session = this.getSession() ; 
        int changeNum=0;  
        changeNum = session.getAttribute("CHANGENUM")==null ? 1:(Integer)session.getAttribute("CHANGENUM");
        
     // 处理数据分页的起始条数
        String startIndex = request.getParameter("startIndex");
        
        if (StringUtil.isNotBlank(startIndex))
        {
            page = new Page(Page.DEFAULT_PAGE_SIZE, Integer.valueOf(startIndex));
        }
        else
        {
            page = new Page(Page.DEFAULT_PAGE_SIZE, 0);
        }
        
        if(field != ""){
            Map<String,String> map=new HashMap<String, String>();
            int num = changeNum%2;
            
            if(num==0){
                map.put("sortType", "DESC");
            }else{
                map.put("sortType", "ASC") ; 
            }
            if(sortType != null){
                map.put("sortType", sortType);
            }
            map.put("field", field);
            
            actionStr = "field="+field+"&sortType="+map.get("sortType");
            
            sr = vulnerabilityAssessmentManager.sort(map, page);
            if (sr != null)
            {
            	vulnerabilityAssessmentList = sr.getList();
                request.setAttribute("VAList", vulnerabilityAssessmentList);
                //request.setAttribute("auditList", vulList);
                request.setAttribute("Page", sr.getPage());
            }
            else
            {
                request.setAttribute("Page", new Page(Page.DEFAULT_PAGE_SIZE, 0));
            }
        }
        changeNum++ ; 
        session.setAttribute("CHANGENUM", changeNum);
        return SUCCESS ; 

    	
    	
    }
	public VulnerabilityAssessmentService getVulnerabilityAssessmentManager() {
		return vulnerabilityAssessmentManager;
	}
	public void setVulnerabilityAssessmentManager(
			VulnerabilityAssessmentService vulnerabilityAssessmentManager) {
		this.vulnerabilityAssessmentManager = vulnerabilityAssessmentManager;
	}
	public List<VulnerabilityAssessment> getVulnerabilityAssessmentList() {
		return vulnerabilityAssessmentList;
	}
	public void setVulnerabilityAssessmentList(
			List<VulnerabilityAssessment> vulnerabilityAssessmentList) {
		this.vulnerabilityAssessmentList = vulnerabilityAssessmentList;
	}
	public File getUpTar() {
		return upTar;
	}
	public void setUpTar(File upTar) {
		this.upTar = upTar;
	}
	public String getUpTarFileName() {
		return upTarFileName;
	}
	public void setUpTarFileName(String upTarFileName) {
		this.upTarFileName = upTarFileName;
	}
	public String getKeyword() {
		return keyword;
	}
	public void setKeyword(String keyword) {
		this.keyword = keyword;
	}
	public String getVulnerabilityAssessmentAssetName() {
		return vulnerabilityAssessmentAssetName;
	}
	public void setVulnerabilityAssessmentAssetName(
			String vulnerabilityAssessmentAssetName) {
		this.vulnerabilityAssessmentAssetName = vulnerabilityAssessmentAssetName;
	}
	public String getVulnerabilityAssessmentRiskLevels() {
		return vulnerabilityAssessmentRiskLevels;
	}
	public void setVulnerabilityAssessmentRiskLevels(
			String vulnerabilityAssessmentRiskLevels) {
		this.vulnerabilityAssessmentRiskLevels = vulnerabilityAssessmentRiskLevels;
	}
	public String getVulnerabilityAssessmentRiskIp() {
		return vulnerabilityAssessmentRiskIp;
	}
	public void setVulnerabilityAssessmentRiskIp(
			String vulnerabilityAssessmentRiskIp) {
		this.vulnerabilityAssessmentRiskIp = vulnerabilityAssessmentRiskIp;
	}
	public String getVulnerabilityAssessmentRiskAbility() {
		return vulnerabilityAssessmentRiskAbility;
	}
	public void setVulnerabilityAssessmentRiskAbility(
			String vulnerabilityAssessmentRiskAbility) {
		this.vulnerabilityAssessmentRiskAbility = vulnerabilityAssessmentRiskAbility;
	}
	public AssetService getAssetManager() {
		return assetManager;
	}
	public void setAssetManager(AssetService assetManager) {
		this.assetManager = assetManager;
	}
	public AuditService getAuditManager() {
		return auditManager;
	}
	public void setAuditManager(AuditService auditManager) {
		this.auditManager = auditManager;
	}
	public String getActionStr() {
		return actionStr;
	}
	public void setActionStr(String actionStr) {
		this.actionStr = actionStr;
	}
	public String getSortType() {
		return sortType;
	}
	public void setSortType(String sortType) {
		this.sortType = sortType;
	}
	public String getField() {
		return field;
	}
	public void setField(String field) {
		this.field = field;
	}
	public String getTypeid() {
		return typeid;
	}
	public void setTypeid(String typeid) {
		this.typeid = typeid;
	}
	public String getAbc() {
		return abc;
	}
	public void setAbc(String abc) {
		this.abc = abc;
	}
	public String getInfo() {
		return info;
	}
	public void setInfo(String info) {
		this.info = info;
	}
	public static long getSerialversionuid() {
		return serialVersionUID;
	}
  

 
    
}  